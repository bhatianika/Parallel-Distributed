**Q1**

#include <mpi.h>
#include <stdio.h>
#include <stdlib.h>
#include <math.h>



#define VECTOR_SIZE 65536

double X[VECTOR_SIZE], Y[VECTOR_SIZE];
double a = 2.5;

int main(int argc, char** argv) {
    MPI_Init(&argc, &argv);
    int rank, size;
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);
    
    int chunk_size = VECTOR_SIZE / size;
    int start = rank * chunk_size;
    int end = start + chunk_size;
    
    for (int i = start; i < end; i++) {
        X[i] = i * 1.0;
        Y[i] = i * 2.0;
    }
    
    double start_time = MPI_Wtime();
    for (int i = start; i < end; i++) {
        X[i] = a * X[i] + Y[i];
    }
    double end_time = MPI_Wtime();
    
    double local_time = end_time - start_time;
    double max_time;
    MPI_Reduce(&local_time, &max_time, 1, MPI_DOUBLE, MPI_MAX, 0, MPI_COMM_WORLD);
    
    if (rank == 0) {
        printf("DAXPY operation completed. Max time: %f seconds\n", max_time);
    }
    
    MPI_Finalize();
    return 0;
}


**Q2**

#include <mpi.h>
#include <stdio.h>
#include <stdlib.h>

#define NUM_STEPS 100000

double calculate_pi(int start, int end, double step) {
    double sum = 0.0;
    for (int i = start; i < end; i++) {
        double x = (i + 0.5) * step;
        sum += 4.0 / (1.0 + x * x);
    }
    return sum;
}

int main(int argc, char** argv) {
    int rank, size;
    double step = 1.0 / (double)NUM_STEPS;
    double local_sum, global_sum;
    
    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);
    
    int chunk_size = NUM_STEPS / size;
    int start = rank * chunk_size;
    int end = (rank == size - 1) ? NUM_STEPS : start + chunk_size;
    
    local_sum = calculate_pi(start, end, step);
    
    MPI_Reduce(&local_sum, &global_sum, 1, MPI_DOUBLE, MPI_SUM, 0, MPI_COMM_WORLD);
    
    if (rank == 0) {
        double pi = step * global_sum;
        printf("Calculated value of pi: %f\n", pi);
    }
    
    MPI_Finalize();
    return 0;
}


**Q3**

#include <mpi.h>
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#define MAX_VALUE 100

int is_prime(int num) {
    if (num < 2) return 0;
    for (int i = 2; i <= sqrt(num); i++) {
        if (num % i == 0) return 0;
    }
    return 1;
}

int main(int argc, char** argv) {
    MPI_Init(&argc, &argv);
    int rank, size;
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    if (rank == 0) {
        int num = 2;
        int active_workers = size - 1;
        
        for (int i = 1; i < size; i++) {
            MPI_Send(&num, 1, MPI_INT, i, 0, MPI_COMM_WORLD);
            num++;
        }
        
        while (num <= MAX_VALUE) {
            int result, worker;
            MPI_Recv(&result, 1, MPI_INT, MPI_ANY_SOURCE, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
            if (result > 0) {
                printf("Prime: %d\n", result);
            }
            worker = rank;
            MPI_Send(&num, 1, MPI_INT, worker, 0, MPI_COMM_WORLD);
            num++;
        }
        
        for (int i = 1; i < size; i++) {
            int stop_signal = -1;
            MPI_Send(&stop_signal, 1, MPI_INT, i, 0, MPI_COMM_WORLD);
        }
    } else {
        while (1) {
            int num;
            MPI_Recv(&num, 1, MPI_INT, 0, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
            if (num == -1) break;
            int result = is_prime(num) ? num : -1;
            MPI_Send(&result, 1, MPI_INT, 0, 0, MPI_COMM_WORLD);
        }
    }
    
    MPI_Finalize();
    return 0;
}
